{"ast":null,"code":"// import React from \"react\";\n// import { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\n// import Button from \"@mui/material/Button\";\n// import {\n//   db,\n//   doc,\n//   updateDoc,\n//   ref,\n//   uploadBytesResumable,\n//   storage,\n//   getDownloadURL,\n// } from \"../../../data/firebase\";\n// import { useSnackbar } from \"notistack\";\n// import Backdrop from \"@mui/material/Backdrop\";\n// import { Avatar, CircularProgress, Grid, Typography } from \"@mui/material\";\n// import { Box } from \"@mui/system\";\n// import { makeStyles } from \"@mui/styles\";\n// const useStyles = makeStyles(() => ({\n//   image: {\n//     margin: \"0px auto 15px auto\",\n//     width: 128,\n//     height: 100,\n//   },\n//   mb: {\n//     marginBottom: 10,\n//   },\n// }));\n// const CircularProgressWithLabel = (props) => {\n//   return (\n//     <Box position=\"relative\" display=\"inline-flex\">\n//       <CircularProgress\n//         variant=\"determinate\"\n//         {...props}\n//         size={90}\n//         thickness={3.0}\n//         style={{ color: \"green\" }}\n//       />\n//       <Box\n//         top={0}\n//         left={0}\n//         bottom={0}\n//         right={0}\n//         position=\"absolute\"\n//         display=\"flex\"\n//         alignItems=\"center\"\n//         justifyContent=\"center\"\n//       >\n//         <Typography\n//           variant=\"body1\"\n//           component=\"div\"\n//           style={{ color: \"white\", fontFamily: \"roboto\" }}\n//         >{`${Math.round(props.value)}%`}</Typography>\n//       </Box>\n//     </Box>\n//   );\n// };\n// const UpdateSubAlbumForm = (props) => {\n//   const classes = useStyles();\n//   let { setOpen, id, list, image, desc, index } = props;\n//   const [formValues, setFormValues] = React.useState({\n//     desc: desc,\n//   });\n//   const [file, setFile] = React.useState(null);\n//   const [isUploading, setIsUploading] = React.useState(false);\n//   const [isLoading, setIsLoading] = React.useState(false);\n//   const [progress, setProgress] = React.useState(0);\n//   const [previewImage, setPreviewImage] = React.useState(\"\");\n//   const { enqueueSnackbar } = useSnackbar();\n//   const handleChange = (e) => {\n//     const { id, name, value } = e.target;\n//     if (id === \"image\") {\n//       setFile(e.target.files[0]);\n//       setPreviewImage(URL.createObjectURL(e.target.files[0]));\n//       setFormValues((prevData) => ({\n//         ...prevData,\n//         image: e.target.value,\n//       }));\n//     } else {\n//       setFormValues((prevData) => ({ ...prevData, [name]: value }));\n//     }\n//   };\n//   const uploadNewImage = () => {\n//     setIsUploading(true);\n//     const timeNow = new Date();\n//     //First upload image to firebase storage then save to firestore\n//     const storageRef = ref(storage, \"gallery/\" + timeNow.getTime());\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const uprogress =\n//           (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//         setProgress(uprogress);\n//       },\n//       (error) => {\n//         setIsUploading(false);\n//         // console.log(error);\n//         enqueueSnackbar(`${error?.message}`, { variant: \"error\" });\n//       },\n//       () => {\n//         setIsUploading(false);\n//         setIsLoading(true);\n//         getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n//           const mRef = doc(db, \"gallery\", \"\" + id);\n//           try {\n//             await updateDoc(mRef, {\n//               title: formValues.title,\n//               image: downloadURL,\n//             });\n//             setOpen(false);\n//             setIsLoading(false);\n//             enqueueSnackbar(`Gallery updated successfully`, {\n//               variant: \"success\",\n//             });\n//           } catch (error) {\n//             setIsLoading(false);\n//             enqueueSnackbar(\n//               `${error?.message || \"Check your internet connection\"}`,\n//               {\n//                 variant: \"error\",\n//               }\n//             );\n//           }\n//         });\n//       }\n//     );\n//   };\n//   const addRecord = async (e) => {\n//     setIsLoading(true);\n//     list = Object.assign([], list);\n//     let object = list[index];\n//     // list?.push({\n//     //   desc: formValues.desc,\n//     // });\n//     console.log(\"OBJECT\", { ...object });\n//     let obj = { desc: \"Hello\", image: \"http://jkfdjb\" };\n//     let mer = { ...list, object: obj };\n//     console.log(\"JK\", mer);\n//     // const mRef = doc(db, \"gallery\", \"\" + id);\n//     // if (!previewImage) {\n//     //   try {\n//     //     const mRef = doc(db, \"gallery\", \"\" + id);\n//     //     let obj = { ...object, desc: \"Hello\", image: \"http://jkfdjb\" };\n//     //     console.log(\"OBJEC2\", obj);\n//     //     await updateDoc(mRef, {\n//     //       title: formValues.title,\n//     //     });\n//     //     setOpen(false);\n//     //     setIsLoading(false);\n//     //     enqueueSnackbar(`Gallery updated successfully`, {\n//     //       variant: \"success\",\n//     //     });\n//     //   } catch (error) {\n//     //     setIsLoading(false);\n//     //     enqueueSnackbar(`${error?.message || \"Check internet connection\"}`, {\n//     //       variant: \"error\",\n//     //     });\n//     //   }\n//     // } else {\n//     //   uploadNewImage();\n//     // }\n//     // try {\n//     //   await updateDoc(mRef, {\n//     //     items: list[id],\n//     //   });\n//     //   setOpen(false);\n//     //   setIsLoading(false);\n//     //   enqueueSnackbar(`Department function added successfully`, {\n//     //     variant: \"success\",\n//     //   });\n//     // } catch (error) {\n//     //   setIsLoading(false);\n//     //   enqueueSnackbar(`${error?.message || \"Check your internet!\"}`, {\n//     //     variant: \"error\",\n//     //   });\n//     // }\n//   };\n//   return (\n//     <div>\n//       <Backdrop style={{ zIndex: 1200 }} open={isUploading || isLoading}>\n//         {isUploading ? <CircularProgressWithLabel value={progress} /> : <div />}\n//         {isLoading ? (\n//           <CircularProgress\n//             size={90}\n//             thickness={3.0}\n//             style={{ color: \"white\" }}\n//           />\n//         ) : (\n//           <div />\n//         )}\n//       </Backdrop>\n//       <ValidatorForm onSubmit={addRecord}>\n//         <TextValidator\n//           label=\"Text\"\n//           size=\"small\"\n//           variant=\"outlined\"\n//           value={formValues.text}\n//           onChange={handleChange}\n//           name=\"text\"\n//           fullWidth\n//           required\n//           validators={[\"required\"]}\n//           errorMessages={[\"Text is required\"]}\n//         />\n//         <br />\n//         <Grid container spacing={1} padding={1}>\n//           <Grid item xs={12} sm={6} md={7}>\n//             <TextValidator\n//               id=\"image\"\n//               size=\"small\"\n//               variant=\"outlined\"\n//               value={formValues.image}\n//               name=\"image\"\n//               type=\"file\"\n//               fullWidth\n//               disabled={isLoading}\n//               accept=\".png, .jpg, .jpeg\"\n//               onChange={handleChange}\n//               helperText=\"Featured image\"\n//             />\n//           </Grid>\n//           <Grid item xs={12} sm={6} md={5}>\n//             <div>\n//               <Avatar\n//                 variant=\"rounded\"\n//                 alt=\"Passport\"\n//                 src={previewImage ? previewImage : image}\n//                 className={classes.image}\n//               />\n//             </div>\n//           </Grid>\n//         </Grid>\n//         <br />\n//         <Button\n//           type=\"submit\"\n//           variant=\"contained\"\n//           disabled={isLoading}\n//           fullWidth\n//         >\n//           Save\n//         </Button>\n//       </ValidatorForm>\n//     </div>\n//   );\n// };\n// export default UpdateSubAlbumForm;","map":{"version":3,"sources":["/Users/macintosh/Developer/RSPHCMB-Admin/src/presentation/forms/gallery/update_sub_album.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React from \"react\";\n// import { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\n// import Button from \"@mui/material/Button\";\n// import {\n//   db,\n//   doc,\n//   updateDoc,\n//   ref,\n//   uploadBytesResumable,\n//   storage,\n//   getDownloadURL,\n// } from \"../../../data/firebase\";\n// import { useSnackbar } from \"notistack\";\n// import Backdrop from \"@mui/material/Backdrop\";\n// import { Avatar, CircularProgress, Grid, Typography } from \"@mui/material\";\n// import { Box } from \"@mui/system\";\n// import { makeStyles } from \"@mui/styles\";\n\n// const useStyles = makeStyles(() => ({\n//   image: {\n//     margin: \"0px auto 15px auto\",\n//     width: 128,\n//     height: 100,\n//   },\n//   mb: {\n//     marginBottom: 10,\n//   },\n// }));\n\n// const CircularProgressWithLabel = (props) => {\n//   return (\n//     <Box position=\"relative\" display=\"inline-flex\">\n//       <CircularProgress\n//         variant=\"determinate\"\n//         {...props}\n//         size={90}\n//         thickness={3.0}\n//         style={{ color: \"green\" }}\n//       />\n//       <Box\n//         top={0}\n//         left={0}\n//         bottom={0}\n//         right={0}\n//         position=\"absolute\"\n//         display=\"flex\"\n//         alignItems=\"center\"\n//         justifyContent=\"center\"\n//       >\n//         <Typography\n//           variant=\"body1\"\n//           component=\"div\"\n//           style={{ color: \"white\", fontFamily: \"roboto\" }}\n//         >{`${Math.round(props.value)}%`}</Typography>\n//       </Box>\n//     </Box>\n//   );\n// };\n\n// const UpdateSubAlbumForm = (props) => {\n//   const classes = useStyles();\n//   let { setOpen, id, list, image, desc, index } = props;\n//   const [formValues, setFormValues] = React.useState({\n//     desc: desc,\n//   });\n//   const [file, setFile] = React.useState(null);\n//   const [isUploading, setIsUploading] = React.useState(false);\n//   const [isLoading, setIsLoading] = React.useState(false);\n//   const [progress, setProgress] = React.useState(0);\n//   const [previewImage, setPreviewImage] = React.useState(\"\");\n\n//   const { enqueueSnackbar } = useSnackbar();\n\n//   const handleChange = (e) => {\n//     const { id, name, value } = e.target;\n\n//     if (id === \"image\") {\n//       setFile(e.target.files[0]);\n//       setPreviewImage(URL.createObjectURL(e.target.files[0]));\n//       setFormValues((prevData) => ({\n//         ...prevData,\n//         image: e.target.value,\n//       }));\n//     } else {\n//       setFormValues((prevData) => ({ ...prevData, [name]: value }));\n//     }\n//   };\n\n//   const uploadNewImage = () => {\n//     setIsUploading(true);\n//     const timeNow = new Date();\n//     //First upload image to firebase storage then save to firestore\n//     const storageRef = ref(storage, \"gallery/\" + timeNow.getTime());\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const uprogress =\n//           (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//         setProgress(uprogress);\n//       },\n//       (error) => {\n//         setIsUploading(false);\n//         // console.log(error);\n//         enqueueSnackbar(`${error?.message}`, { variant: \"error\" });\n//       },\n//       () => {\n//         setIsUploading(false);\n//         setIsLoading(true);\n//         getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n//           const mRef = doc(db, \"gallery\", \"\" + id);\n//           try {\n//             await updateDoc(mRef, {\n//               title: formValues.title,\n//               image: downloadURL,\n//             });\n//             setOpen(false);\n//             setIsLoading(false);\n//             enqueueSnackbar(`Gallery updated successfully`, {\n//               variant: \"success\",\n//             });\n//           } catch (error) {\n//             setIsLoading(false);\n//             enqueueSnackbar(\n//               `${error?.message || \"Check your internet connection\"}`,\n//               {\n//                 variant: \"error\",\n//               }\n//             );\n//           }\n//         });\n//       }\n//     );\n//   };\n\n//   const addRecord = async (e) => {\n//     setIsLoading(true);\n//     list = Object.assign([], list);\n//     let object = list[index];\n//     // list?.push({\n//     //   desc: formValues.desc,\n//     // });\n//     console.log(\"OBJECT\", { ...object });\n//     let obj = { desc: \"Hello\", image: \"http://jkfdjb\" };\n\n//     let mer = { ...list, object: obj };\n//     console.log(\"JK\", mer);\n\n//     // const mRef = doc(db, \"gallery\", \"\" + id);\n\n//     // if (!previewImage) {\n//     //   try {\n//     //     const mRef = doc(db, \"gallery\", \"\" + id);\n//     //     let obj = { ...object, desc: \"Hello\", image: \"http://jkfdjb\" };\n//     //     console.log(\"OBJEC2\", obj);\n\n//     //     await updateDoc(mRef, {\n//     //       title: formValues.title,\n//     //     });\n//     //     setOpen(false);\n//     //     setIsLoading(false);\n//     //     enqueueSnackbar(`Gallery updated successfully`, {\n//     //       variant: \"success\",\n//     //     });\n//     //   } catch (error) {\n//     //     setIsLoading(false);\n//     //     enqueueSnackbar(`${error?.message || \"Check internet connection\"}`, {\n//     //       variant: \"error\",\n//     //     });\n//     //   }\n//     // } else {\n//     //   uploadNewImage();\n//     // }\n\n//     // try {\n//     //   await updateDoc(mRef, {\n//     //     items: list[id],\n//     //   });\n//     //   setOpen(false);\n//     //   setIsLoading(false);\n//     //   enqueueSnackbar(`Department function added successfully`, {\n//     //     variant: \"success\",\n//     //   });\n//     // } catch (error) {\n//     //   setIsLoading(false);\n//     //   enqueueSnackbar(`${error?.message || \"Check your internet!\"}`, {\n//     //     variant: \"error\",\n//     //   });\n//     // }\n//   };\n\n//   return (\n//     <div>\n//       <Backdrop style={{ zIndex: 1200 }} open={isUploading || isLoading}>\n//         {isUploading ? <CircularProgressWithLabel value={progress} /> : <div />}\n//         {isLoading ? (\n//           <CircularProgress\n//             size={90}\n//             thickness={3.0}\n//             style={{ color: \"white\" }}\n//           />\n//         ) : (\n//           <div />\n//         )}\n//       </Backdrop>\n//       <ValidatorForm onSubmit={addRecord}>\n//         <TextValidator\n//           label=\"Text\"\n//           size=\"small\"\n//           variant=\"outlined\"\n//           value={formValues.text}\n//           onChange={handleChange}\n//           name=\"text\"\n//           fullWidth\n//           required\n//           validators={[\"required\"]}\n//           errorMessages={[\"Text is required\"]}\n//         />\n//         <br />\n//         <Grid container spacing={1} padding={1}>\n//           <Grid item xs={12} sm={6} md={7}>\n//             <TextValidator\n//               id=\"image\"\n//               size=\"small\"\n//               variant=\"outlined\"\n//               value={formValues.image}\n//               name=\"image\"\n//               type=\"file\"\n//               fullWidth\n//               disabled={isLoading}\n//               accept=\".png, .jpg, .jpeg\"\n//               onChange={handleChange}\n//               helperText=\"Featured image\"\n//             />\n//           </Grid>\n\n//           <Grid item xs={12} sm={6} md={5}>\n//             <div>\n//               <Avatar\n//                 variant=\"rounded\"\n//                 alt=\"Passport\"\n//                 src={previewImage ? previewImage : image}\n//                 className={classes.image}\n//               />\n//             </div>\n//           </Grid>\n//         </Grid>\n//         <br />\n\n//         <Button\n//           type=\"submit\"\n//           variant=\"contained\"\n//           disabled={isLoading}\n//           fullWidth\n//         >\n//           Save\n//         </Button>\n//       </ValidatorForm>\n//     </div>\n//   );\n// };\n\n// export default UpdateSubAlbumForm;\n"]},"metadata":{},"sourceType":"module"}