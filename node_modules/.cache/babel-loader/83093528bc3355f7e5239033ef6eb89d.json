{"ast":null,"code":"var _jsxFileName = \"/Users/macintosh/Developer/RSPHCMB-Admin/src/presentation/components/misc/richtext/editable.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport MUIRichTextEditor from \"mui-rte\";\nimport { EditorState, convertToRaw, convertFromHTML, convertFromRaw, ContentState } from \"draft-js\"; // import { createMuiTheme } from \"@mui/core/styles\";\n\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultTheme = createTheme();\nObject.assign(defaultTheme, {\n  overrides: {\n    MUIRichTextEditor: {\n      root: {\n        marginBottom: 10,\n        width: \"100%\"\n      },\n      container: {\n        height: \"100%\",\n        border: \"1px solid rgba(0, 0, 0, 0.23)\",\n        borderRadius: 6,\n        padding: 15,\n        overflow: \"auto\"\n      },\n      editorContainer: {\n        position: \"relative !important\",\n        marginBottom: 20,\n        minHeight: 100,\n        maxHeight: 156\n      }\n    }\n  }\n});\n\nconst EditableRichText = props => {\n  _s();\n\n  const {\n    value,\n    setValue,\n    setError,\n    error,\n    setIsStartedFilling\n  } = props;\n  const [ed, setEd] = React.useState(); //   // 1. Convert the HTML\n  //   const contentHTML = convertFromRaw(value);\n  //   // convertFromHTML(value);\n  //   // 2. Create the ContentState object\n  //   const state = ContentState.createFromBlockArray(\n  //     contentHTML.contentBlocks,\n  //     contentHTML.entityMap\n  //   );\n  // 3. Stringify `state` object from a Draft.Model.Encoding.RawDraftContentState object\n  //   const content = convertFromRaw(JSON.parse(value));\n  //   const content = EditorState.createWithContent(state);/\n\n  const handleChange = state => {\n    const data = JSON.stringify(convertToRaw(state.getCurrentContent()));\n\n    if (error) {\n      setError(false);\n    }\n\n    if (state.getCurrentContent().hasText()) {\n      setIsStartedFilling(true); //   setValue(data);\n    }\n  };\n\n  const save = data => {\n    // save this data somewhere\n    console.log(data);\n  }; //   React.useEffect(() => {\n  //     // const storeRaw = localStorage.getItem('draftRaw');\n  //     let initialEditorState = null;\n  //     if (value) {\n  //       const rawContentFromStore = convertFromRaw(\n  //         JSON.parse(JSON.stringify(value))\n  //       );\n  //       initialEditorState = EditorState.createWithContent(rawContentFromStore);\n  //       //   EditorState.createWithContent(convertFromRaw(JSON.parse(rawContentState))\n  //     } else {\n  //       initialEditorState = EditorState.createEmpty();\n  //     }\n  //     setEd(initialEditorState);\n  //   }, [ed, value]);\n  // this.state = {\n  //   editorState: initialEditorState\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: defaultTheme,\n    children: /*#__PURE__*/_jsxDEV(MUIRichTextEditor //   defaultValue={}\n    , {\n      controls: [\"title\", \"bold\", \"italic\", \"underline\", \"strikethrough\", \"highlight\", \"undo\", \"redo\", \"link\", \"media\", \"numberList\", \"bulletList\", \"quote\", \"code\", \"clear\", \"save\"],\n      error: error,\n      label: \"Type here...\",\n      toolbarButtonSize: \"small\",\n      inlineToolbar: true,\n      onSave: save,\n      onChange: handleChange // value={ed}\n      ,\n      defaultValue: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditableRichText, \"gHqnJmz0R5MnEEAvGxZaUMM7Bf8=\");\n\n_c = EditableRichText;\nexport default EditableRichText;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditableRichText\");","map":{"version":3,"sources":["/Users/macintosh/Developer/RSPHCMB-Admin/src/presentation/components/misc/richtext/editable.js"],"names":["React","MUIRichTextEditor","EditorState","convertToRaw","convertFromHTML","convertFromRaw","ContentState","createTheme","ThemeProvider","defaultTheme","Object","assign","overrides","root","marginBottom","width","container","height","border","borderRadius","padding","overflow","editorContainer","position","minHeight","maxHeight","EditableRichText","props","value","setValue","setError","error","setIsStartedFilling","ed","setEd","useState","handleChange","state","data","JSON","stringify","getCurrentContent","hasText","save","console","log"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport MUIRichTextEditor from \"mui-rte\";\nimport {\n  EditorState,\n  convertToRaw,\n  convertFromHTML,\n  convertFromRaw,\n  ContentState,\n} from \"draft-js\";\n// import { createMuiTheme } from \"@mui/core/styles\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\n\nconst defaultTheme = createTheme();\n\nObject.assign(defaultTheme, {\n  overrides: {\n    MUIRichTextEditor: {\n      root: {\n        marginBottom: 10,\n        width: \"100%\",\n      },\n      container: {\n        height: \"100%\",\n        border: \"1px solid rgba(0, 0, 0, 0.23)\",\n        borderRadius: 6,\n        padding: 15,\n        overflow: \"auto\",\n      },\n      editorContainer: {\n        position: \"relative !important\",\n        marginBottom: 20,\n        minHeight: 100,\n        maxHeight: 156,\n      },\n    },\n  },\n});\n\nconst EditableRichText = (props) => {\n  const { value, setValue, setError, error, setIsStartedFilling } = props;\n  const [ed, setEd] = React.useState();\n\n  //   // 1. Convert the HTML\n  //   const contentHTML = convertFromRaw(value);\n  //   // convertFromHTML(value);\n\n  //   // 2. Create the ContentState object\n  //   const state = ContentState.createFromBlockArray(\n  //     contentHTML.contentBlocks,\n  //     contentHTML.entityMap\n  //   );\n\n  // 3. Stringify `state` object from a Draft.Model.Encoding.RawDraftContentState object\n  //   const content = convertFromRaw(JSON.parse(value));\n  //   const content = EditorState.createWithContent(state);/\n\n  const handleChange = (state) => {\n    const data = JSON.stringify(convertToRaw(state.getCurrentContent()));\n\n    if (error) {\n      setError(false);\n    }\n\n    if (state.getCurrentContent().hasText()) {\n      setIsStartedFilling(true);\n      //   setValue(data);\n    }\n  };\n\n  const save = (data) => {\n    // save this data somewhere\n    console.log(data);\n  };\n\n  //   React.useEffect(() => {\n  //     // const storeRaw = localStorage.getItem('draftRaw');\n  //     let initialEditorState = null;\n\n  //     if (value) {\n  //       const rawContentFromStore = convertFromRaw(\n  //         JSON.parse(JSON.stringify(value))\n  //       );\n  //       initialEditorState = EditorState.createWithContent(rawContentFromStore);\n  //       //   EditorState.createWithContent(convertFromRaw(JSON.parse(rawContentState))\n  //     } else {\n  //       initialEditorState = EditorState.createEmpty();\n  //     }\n\n  //     setEd(initialEditorState);\n  //   }, [ed, value]);\n  // this.state = {\n  //   editorState: initialEditorState\n  // };\n\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      {/* <MUIRichTextEditor\n              readOnly\n              inlineToolbar={false}\n              style={{ width: \"100%\", textAlign: \"center\" }}\n              defaultValue={text}\n              toolbar={false}\n            /> */}\n      <MUIRichTextEditor\n        //   defaultValue={}\n        controls={[\n          \"title\",\n          \"bold\",\n          \"italic\",\n          \"underline\",\n          \"strikethrough\",\n          \"highlight\",\n          \"undo\",\n          \"redo\",\n          \"link\",\n          \"media\",\n          \"numberList\",\n          \"bulletList\",\n          \"quote\",\n          \"code\",\n          \"clear\",\n          \"save\",\n        ]}\n        error={error}\n        label=\"Type here...\"\n        toolbarButtonSize=\"small\"\n        inlineToolbar={true}\n        onSave={save}\n        onChange={handleChange}\n        // value={ed}\n\n        defaultValue={value}\n      />\n    </ThemeProvider>\n  );\n};\n\nexport default EditableRichText;\n"]},"metadata":{},"sourceType":"module"}