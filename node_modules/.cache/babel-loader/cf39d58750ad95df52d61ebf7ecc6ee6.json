{"ast":null,"code":"var _jsxFileName = \"/Users/macintosh/Developer/RSPHCMB-Admin/src/presentation/forms/about-rsphcmb/who_we_are_content.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { ValidatorForm } from \"react-material-ui-form-validator\";\nimport Button from \"@mui/material/Button\";\nimport { db, doc, updateDoc } from \"../../../data/firebase\";\nimport { useSnackbar } from \"notistack\";\nimport Backdrop from \"@mui/material/Backdrop\";\nimport { CircularProgress } from \"@mui/material\";\nimport RichText from \"../../components/misc/richtext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WhoWeAreContent = props => {\n  _s();\n\n  let {\n    setOpen,\n    content\n  } = props;\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [body, setBody] = React.useState(content);\n  const [isError, setIsError] = React.useState(false);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const [isStartedFilling, setIsStartedFilling] = React.useState(false);\n\n  const updateData = async e => {\n    setIsLoading(true); //No image is changed. So update all text\n\n    const timeNow = new Date();\n\n    try {\n      const mRef = doc(db, \"about\", \"rsphcmb\");\n      await updateDoc(mRef, {\n        who_we_are: body,\n        updatedAt: timeNow\n      });\n      setOpen(false);\n      setIsLoading(false);\n      enqueueSnackbar(`Data updated successfully`, {\n        variant: \"success\"\n      });\n    } catch (error) {\n      setIsLoading(false);\n      enqueueSnackbar(`${error === null || error === void 0 ? void 0 : error.message}`, {\n        variant: \"error\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Backdrop, {\n      style: {\n        zIndex: 1200\n      },\n      open: isLoading,\n      children: isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: 90,\n        thickness: 3.0,\n        style: {\n          color: \"white\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ValidatorForm, {\n      onSubmit: updateData,\n      children: [/*#__PURE__*/_jsxDEV(RichText, {\n        value: body,\n        setValue: setBody,\n        error: isError,\n        setError: setIsError,\n        setIsStartedFilling: setIsStartedFilling\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        disabled: isLoading,\n        fullWidth: true,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WhoWeAreContent, \"faKf333bAVlbczZA6+Zqc1NQRMk=\", false, function () {\n  return [useSnackbar];\n});\n\n_c = WhoWeAreContent;\nexport default WhoWeAreContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"WhoWeAreContent\");","map":{"version":3,"sources":["/Users/macintosh/Developer/RSPHCMB-Admin/src/presentation/forms/about-rsphcmb/who_we_are_content.js"],"names":["React","ValidatorForm","Button","db","doc","updateDoc","useSnackbar","Backdrop","CircularProgress","RichText","WhoWeAreContent","props","setOpen","content","isLoading","setIsLoading","useState","body","setBody","isError","setIsError","enqueueSnackbar","isStartedFilling","setIsStartedFilling","updateData","e","timeNow","Date","mRef","who_we_are","updatedAt","variant","error","message","zIndex","color"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { ValidatorForm } from \"react-material-ui-form-validator\";\nimport Button from \"@mui/material/Button\";\nimport { db, doc, updateDoc } from \"../../../data/firebase\";\nimport { useSnackbar } from \"notistack\";\nimport Backdrop from \"@mui/material/Backdrop\";\nimport { CircularProgress } from \"@mui/material\";\nimport RichText from \"../../components/misc/richtext\";\n\nconst WhoWeAreContent = (props) => {\n  let { setOpen, content } = props;\n\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const [body, setBody] = React.useState(content);\n  const [isError, setIsError] = React.useState(false);\n  const { enqueueSnackbar } = useSnackbar();\n  const [isStartedFilling, setIsStartedFilling] = React.useState(false);\n\n  const updateData = async (e) => {\n    setIsLoading(true);\n\n    //No image is changed. So update all text\n    const timeNow = new Date();\n    try {\n      const mRef = doc(db, \"about\", \"rsphcmb\");\n      await updateDoc(mRef, {\n        who_we_are: body,\n        updatedAt: timeNow,\n      });\n      setOpen(false);\n      setIsLoading(false);\n      enqueueSnackbar(`Data updated successfully`, {\n        variant: \"success\",\n      });\n    } catch (error) {\n      setIsLoading(false);\n      enqueueSnackbar(`${error?.message}`, {\n        variant: \"error\",\n      });\n    }\n  };\n\n  return (\n    <div>\n      <Backdrop style={{ zIndex: 1200 }} open={isLoading}>\n        {isLoading ? (\n          <CircularProgress\n            size={90}\n            thickness={3.0}\n            style={{ color: \"white\" }}\n          />\n        ) : (\n          <div />\n        )}\n      </Backdrop>\n      <ValidatorForm onSubmit={updateData}>\n        <RichText\n          value={body}\n          setValue={setBody}\n          error={isError}\n          setError={setIsError}\n          setIsStartedFilling={setIsStartedFilling}\n        />\n        <br />\n\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          disabled={isLoading}\n          fullWidth\n        >\n          Update\n        </Button>\n      </ValidatorForm>\n    </div>\n  );\n};\n\nexport default WhoWeAreContent;\n"]},"metadata":{},"sourceType":"module"}