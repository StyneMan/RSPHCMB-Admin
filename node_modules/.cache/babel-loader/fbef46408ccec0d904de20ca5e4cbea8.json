{"ast":null,"code":"import React from\"react\";import MUIRichTextEditor from\"mui-rte\";// import {\n// //   EditorState,\n//   convertToRaw,\n// } from \"draft-js\";\n// import { createMuiTheme } from \"@mui/core/styles\";\nimport{createTheme,ThemeProvider}from\"@mui/material/styles\";import{jsx as _jsx}from\"react/jsx-runtime\";var defaultTheme=createTheme();Object.assign(defaultTheme,{overrides:{MUIRichTextEditor:{root:{marginBottom:10,width:\"100%\"},container:{height:\"100%\",border:\"1px solid rgba(0, 0, 0, 0.23)\",borderRadius:6,padding:15,overflow:\"auto\"},editorContainer:{position:\"relative !important\",marginBottom:20,minHeight:100,maxHeight:156}}}});var EditableRichText=function EditableRichText(props){var value=props.value,setValue=props.setValue,setError=props.setError,error=props.error,setIsStartedFilling=props.setIsStartedFilling;//   const [ed, setEd] = React.useState();\n//   // 1. Convert the HTML\n//   const contentHTML = convertFromRaw(value);\n//   // convertFromHTML(value);\n//   // 2. Create the ContentState object\n//   const state = ContentState.createFromBlockArray(\n//     contentHTML.contentBlocks,\n//     contentHTML.entityMap\n//   );\n// 3. Stringify `state` object from a Draft.Model.Encoding.RawDraftContentState object\n//   const content = convertFromRaw(JSON.parse(value));\n//   const content = EditorState.createWithContent(state);/\nvar handleChange=function handleChange(state){// const data = JSON.stringify(convertToRaw(state.getCurrentContent()));\nif(error){setError(false);}if(state.getCurrentContent().hasText()){setIsStartedFilling(true);//   setValue(data);\n}};var save=function save(data){// save this data somewhere\nconsole.log(data);setValue(data);};//   React.useEffect(() => {\n//     // const storeRaw = localStorage.getItem('draftRaw');\n//     let initialEditorState = null;\n//     if (value) {\n//       const rawContentFromStore = convertFromRaw(\n//         JSON.parse(JSON.stringify(value))\n//       );\n//       initialEditorState = EditorState.createWithContent(rawContentFromStore);\n//       //   EditorState.createWithContent(convertFromRaw(JSON.parse(rawContentState))\n//     } else {\n//       initialEditorState = EditorState.createEmpty();\n//     }\n//     setEd(initialEditorState);\n//   }, [ed, value]);\n// this.state = {\n//   editorState: initialEditorState\n// };\nreturn/*#__PURE__*/_jsx(ThemeProvider,{theme:defaultTheme,children:/*#__PURE__*/_jsx(MUIRichTextEditor//   defaultValue={}\n,{controls:[\"title\",\"bold\",\"italic\",\"underline\",\"strikethrough\",\"highlight\",\"undo\",\"redo\",\"link\",\"media\",\"numberList\",\"bulletList\",\"quote\",\"code\",\"clear\",\"save\"],error:error,label:\"Type here...\",toolbarButtonSize:\"small\",inlineToolbar:true,onSave:save,onChange:handleChange// value={ed}\n,defaultValue:value})});};export default EditableRichText;","map":{"version":3,"sources":["/Users/macintosh/Developer/RSPHCMB-Admin/src/presentation/components/misc/richtext/editable.js"],"names":["React","MUIRichTextEditor","createTheme","ThemeProvider","defaultTheme","Object","assign","overrides","root","marginBottom","width","container","height","border","borderRadius","padding","overflow","editorContainer","position","minHeight","maxHeight","EditableRichText","props","value","setValue","setError","error","setIsStartedFilling","handleChange","state","getCurrentContent","hasText","save","data","console","log"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,iBAAP,KAA8B,SAA9B,CACA;AACA;AACA;AACA;AACA;AACA,OAASC,WAAT,CAAsBC,aAAtB,KAA2C,sBAA3C,C,2CAEA,GAAMC,CAAAA,YAAY,CAAGF,WAAW,EAAhC,CAEAG,MAAM,CAACC,MAAP,CAAcF,YAAd,CAA4B,CAC1BG,SAAS,CAAE,CACTN,iBAAiB,CAAE,CACjBO,IAAI,CAAE,CACJC,YAAY,CAAE,EADV,CAEJC,KAAK,CAAE,MAFH,CADW,CAKjBC,SAAS,CAAE,CACTC,MAAM,CAAE,MADC,CAETC,MAAM,CAAE,+BAFC,CAGTC,YAAY,CAAE,CAHL,CAITC,OAAO,CAAE,EAJA,CAKTC,QAAQ,CAAE,MALD,CALM,CAYjBC,eAAe,CAAE,CACfC,QAAQ,CAAE,qBADK,CAEfT,YAAY,CAAE,EAFC,CAGfU,SAAS,CAAE,GAHI,CAIfC,SAAS,CAAE,GAJI,CAZA,CADV,CADe,CAA5B,EAwBA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,KAAD,CAAW,CAClC,GAAQC,CAAAA,KAAR,CAAkED,KAAlE,CAAQC,KAAR,CAAeC,QAAf,CAAkEF,KAAlE,CAAeE,QAAf,CAAyBC,QAAzB,CAAkEH,KAAlE,CAAyBG,QAAzB,CAAmCC,KAAnC,CAAkEJ,KAAlE,CAAmCI,KAAnC,CAA0CC,mBAA1C,CAAkEL,KAAlE,CAA0CK,mBAA1C,CACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAW,CAC9B;AAEA,GAAIH,KAAJ,CAAW,CACTD,QAAQ,CAAC,KAAD,CAAR,CACD,CAED,GAAII,KAAK,CAACC,iBAAN,GAA0BC,OAA1B,EAAJ,CAAyC,CACvCJ,mBAAmB,CAAC,IAAD,CAAnB,CACA;AACD,CACF,CAXD,CAaA,GAAMK,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAACC,IAAD,CAAU,CACrB;AACAC,OAAO,CAACC,GAAR,CAAYF,IAAZ,EACAT,QAAQ,CAACS,IAAD,CAAR,CACD,CAJD,CAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA,mBACE,KAAC,aAAD,EAAe,KAAK,CAAE7B,YAAtB,uBAQE,KAAC,iBACC;AADF,EAEE,QAAQ,CAAE,CACR,OADQ,CAER,MAFQ,CAGR,QAHQ,CAIR,WAJQ,CAKR,eALQ,CAMR,WANQ,CAOR,MAPQ,CAQR,MARQ,CASR,MATQ,CAUR,OAVQ,CAWR,YAXQ,CAYR,YAZQ,CAaR,OAbQ,CAcR,MAdQ,CAeR,OAfQ,CAgBR,MAhBQ,CAFZ,CAoBE,KAAK,CAAEsB,KApBT,CAqBE,KAAK,CAAC,cArBR,CAsBE,iBAAiB,CAAC,OAtBpB,CAuBE,aAAa,CAAE,IAvBjB,CAwBE,MAAM,CAAEM,IAxBV,CAyBE,QAAQ,CAAEJ,YACV;AA1BF,CA4BE,YAAY,CAAEL,KA5BhB,EARF,EADF,CAyCD,CAlGD,CAoGA,cAAeF,CAAAA,gBAAf","sourcesContent":["import React from \"react\";\nimport MUIRichTextEditor from \"mui-rte\";\n// import {\n// //   EditorState,\n//   convertToRaw,\n// } from \"draft-js\";\n// import { createMuiTheme } from \"@mui/core/styles\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\n\nconst defaultTheme = createTheme();\n\nObject.assign(defaultTheme, {\n  overrides: {\n    MUIRichTextEditor: {\n      root: {\n        marginBottom: 10,\n        width: \"100%\",\n      },\n      container: {\n        height: \"100%\",\n        border: \"1px solid rgba(0, 0, 0, 0.23)\",\n        borderRadius: 6,\n        padding: 15,\n        overflow: \"auto\",\n      },\n      editorContainer: {\n        position: \"relative !important\",\n        marginBottom: 20,\n        minHeight: 100,\n        maxHeight: 156,\n      },\n    },\n  },\n});\n\nconst EditableRichText = (props) => {\n  const { value, setValue, setError, error, setIsStartedFilling } = props;\n  //   const [ed, setEd] = React.useState();\n\n  //   // 1. Convert the HTML\n  //   const contentHTML = convertFromRaw(value);\n  //   // convertFromHTML(value);\n\n  //   // 2. Create the ContentState object\n  //   const state = ContentState.createFromBlockArray(\n  //     contentHTML.contentBlocks,\n  //     contentHTML.entityMap\n  //   );\n\n  // 3. Stringify `state` object from a Draft.Model.Encoding.RawDraftContentState object\n  //   const content = convertFromRaw(JSON.parse(value));\n  //   const content = EditorState.createWithContent(state);/\n\n  const handleChange = (state) => {\n    // const data = JSON.stringify(convertToRaw(state.getCurrentContent()));\n\n    if (error) {\n      setError(false);\n    }\n\n    if (state.getCurrentContent().hasText()) {\n      setIsStartedFilling(true);\n      //   setValue(data);\n    }\n  };\n\n  const save = (data) => {\n    // save this data somewhere\n    console.log(data);\n    setValue(data);\n  };\n\n  //   React.useEffect(() => {\n  //     // const storeRaw = localStorage.getItem('draftRaw');\n  //     let initialEditorState = null;\n\n  //     if (value) {\n  //       const rawContentFromStore = convertFromRaw(\n  //         JSON.parse(JSON.stringify(value))\n  //       );\n  //       initialEditorState = EditorState.createWithContent(rawContentFromStore);\n  //       //   EditorState.createWithContent(convertFromRaw(JSON.parse(rawContentState))\n  //     } else {\n  //       initialEditorState = EditorState.createEmpty();\n  //     }\n\n  //     setEd(initialEditorState);\n  //   }, [ed, value]);\n  // this.state = {\n  //   editorState: initialEditorState\n  // };\n\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      {/* <MUIRichTextEditor\n              readOnly\n              inlineToolbar={false}\n              style={{ width: \"100%\", textAlign: \"center\" }}\n              defaultValue={text}\n              toolbar={false}\n            /> */}\n      <MUIRichTextEditor\n        //   defaultValue={}\n        controls={[\n          \"title\",\n          \"bold\",\n          \"italic\",\n          \"underline\",\n          \"strikethrough\",\n          \"highlight\",\n          \"undo\",\n          \"redo\",\n          \"link\",\n          \"media\",\n          \"numberList\",\n          \"bulletList\",\n          \"quote\",\n          \"code\",\n          \"clear\",\n          \"save\",\n        ]}\n        error={error}\n        label=\"Type here...\"\n        toolbarButtonSize=\"small\"\n        inlineToolbar={true}\n        onSave={save}\n        onChange={handleChange}\n        // value={ed}\n\n        defaultValue={value}\n      />\n    </ThemeProvider>\n  );\n};\n\nexport default EditableRichText;\n"]},"metadata":{},"sourceType":"module"}